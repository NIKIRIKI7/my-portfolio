import { glob } from 'glob';
import sharp from 'sharp';
import path from 'path';
import fs from 'fs/promises';
import Fontmin from 'fontmin';
// --- –£–î–ê–õ–ï–ù–ê –≠–¢–ê –°–¢–†–û–ö–ê ---
// import rename from 'gulp-rename';

/**
 * @file –°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π "—É–º–Ω–æ–π" –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
 * 1. –ö–æ–ø–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ `src` –≤ `public`.
 * 2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ .webp –∏ .avif –≤–µ—Ä—Å–∏–π. –ï—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ñ–∞–π–ª.
 * 3. –ï—Å–ª–∏ –≤–µ—Ä—Å–∏–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç —Å–∂–∞—Ç—ã–µ .webp –∏ .avif.
 * 4. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —à—Ä–∏—Ñ—Ç—ã –∏–∑ `src` –≤ `src`, —á—Ç–æ–±—ã Vite –º–æ–≥ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
 */

const IMAGE_SOURCE_GLOB = 'src/shared/assets/images/**/*.{png,jpg,jpeg}';
const IMAGE_DEST_DIR = 'public/assets/images';
const FONT_SOURCE_GLOB = 'src/shared/assets/fonts/**/*.ttf';

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –∫–æ–ø–∏—Ä—É–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç WebP, AVIF, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
 * @param {string} srcPath - –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ `src`.
 */
async function processImage(srcPath) {
    const relativePath = path.relative('src/shared/assets/images', srcPath);
    const destPath = path.join(IMAGE_DEST_DIR, relativePath);
    const { dir, name } = path.parse(destPath);
    const webpPath = path.join(dir, `${name}.webp`);
    const avifPath = path.join(dir, `${name}.avif`);

    try {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await fs.mkdir(dir, { recursive: true });

        // –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ public
        try {
            await fs.access(destPath);
        } catch {
            await fs.copyFile(srcPath, destPath);
            console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª: ${relativePath}`);
        }

        // --- –£–ú–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ---
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –æ–±–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
        const webpExists = await fs.access(webpPath).then(() => true).catch(() => false);
        const avifExists = await fs.access(avifPath).then(() => true).catch(() => false);

        if (webpExists && avifExists) {
            console.log(`-Ô∏è‚É£  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${path.basename(srcPath)}, .webp –∏ .avif —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.`);
            return;
        }

        // –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã
        console.log(`üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º: ${path.basename(srcPath)}`);
        const imageProcessor = sharp(srcPath);

        if (!webpExists) {
            await imageProcessor.webp({ quality: 80 }).toFile(webpPath);
            console.log(`  ‚ú® –°–æ–∑–¥–∞–Ω WebP: ${path.basename(webpPath)}`);
        }
        if (!avifExists) {
            await imageProcessor.avif({ quality: 70 }).toFile(avifPath);
            console.log(`  ‚ú® –°–æ–∑–¥–∞–Ω AVIF: ${path.basename(avifPath)}`);
        }

    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${srcPath}:`, err);
    }
}


/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏ —Å–∂–∏–º–∞–µ—Ç) –æ–¥–∏–Ω —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞.
 * @param {string} fontPath - –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É .ttf.
 */
async function processFont(fontPath) {
    const { dir } = path.parse(fontPath);
    console.log(`üñãÔ∏è  –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç: ${fontPath}`);

    const fontmin = new Fontmin()
        .src(fontPath)
        .use(Fontmin.ttf2woff2())
        .dest(dir);

    return new Promise((resolve, reject) => {
        fontmin.run((err) => {
            if (err) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–∞ ${fontPath}:`, err);
                reject(err);
            } else {
                console.log('‚úÖ –®—Ä–∏—Ñ—Ç —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ woff2');
                resolve();
            }
        });
    });
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
 */
async function runOptimization() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...');

    try {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await fs.mkdir(IMAGE_DEST_DIR, { recursive: true });

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const imagePaths = await glob(IMAGE_SOURCE_GLOB);
        await Promise.all(imagePaths.map(processImage));
        console.log('üñºÔ∏è  –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ src, Vite –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç)
        const fontPaths = await glob(FONT_SOURCE_GLOB);
        await Promise.all(fontPaths.map(processFont));
        console.log('üñãÔ∏è  –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');

        console.log('\nüéâ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    } catch (error) {
        console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
        process.exit(1);
    }
}

await runOptimization();
